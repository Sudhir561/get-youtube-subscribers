{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 8,
    "pending": 0,
    "failures": 2,
    "start": "2023-11-19T19:29:28.138Z",
    "end": "2023-11-19T19:29:38.728Z",
    "duration": 10590,
    "testsRegistered": 10,
    "passPercent": 80,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "97b9df61-07a4-4824-bf7d-0eb9fb7c86e2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 6721,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Connect to a test database or perform any setup you need\n// This will depend on your testing environment and strategy\nawait mongoose.connect('mongodb+srv://sudhirdb:sudhir123@cluster0.ap7jc2a.mongodb.net/youtubesubscribers?retryWrites=true&w=majority', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});",
          "err": {},
          "uuid": "2526f36c-c82c-4e16-b646-66e4bc60ce39",
          "parentUUID": "97b9df61-07a4-4824-bf7d-0eb9fb7c86e2",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 4,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Disconnect from the test database or perform any cleanup\nawait mongoose.disconnect();",
          "err": {},
          "uuid": "46adf598-2e4e-4084-94fb-514f853259f1",
          "parentUUID": "97b9df61-07a4-4824-bf7d-0eb9fb7c86e2",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "6f986a5d-b27f-4c25-86cf-9a73fece73c5",
          "title": "POST /subscribers",
          "fullFile": "D:\\capstone project\\Subscribers-Mongo-Node-BoilerPlate-main\\__tests__\\test.js",
          "file": "\\__tests__\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new subscriber",
              "fullTitle": "POST /subscribers should create a new subscriber",
              "timedOut": false,
              "duration": 1007,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/subscribers')\n  .send({\n    name: 'Test User',\n    subscribedChannel: 'Test Channel',\n    subscribedDate: '2023-11-20T00:00:00.000Z', // Provide a valid date here\n  });\nexpect(response).to.have.status(201);\nexpect(response.body).to.have.property('name', 'Test User');\nexpect(response.body).to.have.property('subscribedChannel', 'Test Channel');",
              "err": {},
              "uuid": "f2166092-ef89-48aa-bac3-296d15f8d2fa",
              "parentUUID": "6f986a5d-b27f-4c25-86cf-9a73fece73c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error for incomplete data",
              "fullTitle": "POST /subscribers should return an error for incomplete data",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/subscribers')\n  .send({});\nexpect(response).to.have.status(400);\nexpect(response.body).to.have.property('error');",
              "err": {},
              "uuid": "da1db36c-568f-4d1e-8a94-6bfb4c08680f",
              "parentUUID": "6f986a5d-b27f-4c25-86cf-9a73fece73c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error for existing subscriber",
              "fullTitle": "POST /subscribers should return an error for existing subscriber",
              "timedOut": false,
              "duration": 297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//send  request data which is   existing in database\nconst response = await chai\n  .request(app)\n  .post('/subscribers')\n  .send({\n    name: 'Test User',\n    subscribedChannel: 'Test Channel',\n  });\nexpect(response).to.have.status(409);\nexpect(response.body).to.have.property('error');",
              "err": {},
              "uuid": "d727a369-a0be-432c-8615-637a732c289b",
              "parentUUID": "6f986a5d-b27f-4c25-86cf-9a73fece73c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f2166092-ef89-48aa-bac3-296d15f8d2fa",
            "da1db36c-568f-4d1e-8a94-6bfb4c08680f",
            "d727a369-a0be-432c-8615-637a732c289b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1307,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "eed84e80-bb5f-4153-9948-91a2a7a067d5",
          "title": "GET /subscribers",
          "fullFile": "D:\\capstone project\\Subscribers-Mongo-Node-BoilerPlate-main\\__tests__\\test.js",
          "file": "\\__tests__\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a list of subscribers",
              "fullTitle": "GET /subscribers should return a list of subscribers",
              "timedOut": false,
              "duration": 267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .get('/subscribers');\nexpect(response).to.have.status(200);\nexpect(response.body).to.be.an('array');",
              "err": {},
              "uuid": "59a30a84-e499-44bf-82c2-e74acc702c39",
              "parentUUID": "eed84e80-bb5f-4153-9948-91a2a7a067d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a custom message for no data found",
              "fullTitle": "GET /subscribers should return a custom message for no data found",
              "timedOut": false,
              "duration": 296,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Assuming the database is empty\nconst response = await chai\n  .request(app)\n  .get('/subscribers');\nexpect(response).to.have.status(404);\nexpect(response.body).to.have.property('message', 'No subscribers data found');",
              "err": {
                "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 404 but got 200",
                "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 404 but got 200\n    at Context.<anonymous> (__tests__\\test.js:89:30)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 200\n+ 404\n"
              },
              "uuid": "e3c58a88-df8b-4dd0-92cf-3295f11c1b00",
              "parentUUID": "eed84e80-bb5f-4153-9948-91a2a7a067d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59a30a84-e499-44bf-82c2-e74acc702c39"
          ],
          "failures": [
            "e3c58a88-df8b-4dd0-92cf-3295f11c1b00"
          ],
          "pending": [],
          "skipped": [],
          "duration": 563,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "38db368e-7ecc-4871-a12c-262587fe1dde",
          "title": "GET /subscribers/names",
          "fullFile": "D:\\capstone project\\Subscribers-Mongo-Node-BoilerPlate-main\\__tests__\\test.js",
          "file": "\\__tests__\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a list of subscriber names",
              "fullTitle": "GET /subscribers/names should return a list of subscriber names",
              "timedOut": false,
              "duration": 372,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .get('/subscribers/names');\nexpect(response).to.have.status(200);\nexpect(response.body).to.be.an('array');",
              "err": {},
              "uuid": "b449fa60-bf47-4db3-a9cc-bda20ff7d7c7",
              "parentUUID": "38db368e-7ecc-4871-a12c-262587fe1dde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a custom message for no data found",
              "fullTitle": "GET /subscribers/names should return a custom message for no data found",
              "timedOut": false,
              "duration": 326,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Assuming the database is empty\nconst response = await chai\n  .request(app)\n  .get('/subscribers/names');\nexpect(response).to.have.status(404);\nexpect(response.body).to.have.property('message', 'No subscribers data  found by name');",
              "err": {
                "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 404 but got 200",
                "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 404 but got 200\n    at Context.<anonymous> (__tests__\\test.js:113:30)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 200\n+ 404\n"
              },
              "uuid": "97cc93dd-2e07-4a28-88f6-c3c3f96b6d73",
              "parentUUID": "38db368e-7ecc-4871-a12c-262587fe1dde",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b449fa60-bf47-4db3-a9cc-bda20ff7d7c7"
          ],
          "failures": [
            "97cc93dd-2e07-4a28-88f6-c3c3f96b6d73"
          ],
          "pending": [],
          "skipped": [],
          "duration": 698,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "daf77d1b-62dd-4e6d-b872-275b263c27d3",
          "title": "GET /subscribers/:id",
          "fullFile": "D:\\capstone project\\Subscribers-Mongo-Node-BoilerPlate-main\\__tests__\\test.js",
          "file": "\\__tests__\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return details of a subscriber",
              "fullTitle": "GET /subscribers/:id should return details of a subscriber",
              "timedOut": false,
              "duration": 954,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create a subscriber to get its ID\nconst createResponse = await chai\n  .request(app)\n  .post('/subscribers')\n  .send({\n    name: 'Test User2',\n    subscribedChannel: 'Test Channel2',\n  });\nconst response = await chai\n  .request(app)\n  .get(`/subscribers/${createResponse.body._id}`);\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('name', 'Test User2');\nexpect(response.body).to.have.property('subscribedChannel', 'Test Channel2');",
              "err": {},
              "uuid": "6b30a336-ac59-4045-9046-3136846be012",
              "parentUUID": "daf77d1b-62dd-4e6d-b872-275b263c27d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error for an invalid ID",
              "fullTitle": "GET /subscribers/:id should return an error for an invalid ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .get('/subscribers/invalidId');\nexpect(response).to.have.status(400);\nexpect(response.body).to.have.property('error');",
              "err": {},
              "uuid": "97583c24-0067-4058-9aa3-e515640798df",
              "parentUUID": "daf77d1b-62dd-4e6d-b872-275b263c27d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error for a non-existing subscriber",
              "fullTitle": "GET /subscribers/:id should return an error for a non-existing subscriber",
              "timedOut": false,
              "duration": 318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .get('/subscribers/123456789012345678901234');\nexpect(response).to.have.status(404);\nexpect(response.body).to.have.property('message', 'Subscriber not found');",
              "err": {},
              "uuid": "e6468b09-b811-4d9b-950d-3aaac146726b",
              "parentUUID": "daf77d1b-62dd-4e6d-b872-275b263c27d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6b30a336-ac59-4045-9046-3136846be012",
            "97583c24-0067-4058-9aa3-e515640798df",
            "e6468b09-b811-4d9b-950d-3aaac146726b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1277,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}